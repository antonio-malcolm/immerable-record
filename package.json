{
  "name": "immerable-record",
  "version": "1.0.12",
  "description": "Immerable Record is an immutable record data structure API, which uses pure, vanilla JavaScript objects for deep nesting",
  "engines-comments": {
    "node": "using nvm to install and manage node versions (most recent stable) (https://github.com/nvm-sh/nvm): $ nvm  install --lts",
    "npm": "using nvm to install and manage npm versions (most recent stable) (https://github.com/nvm-sh/nvm): $ nvm install-latest-npm"
  },
  "engines": {
    "node": "^14.17.1",
    "npm": "^6.14.13",
    "pnpm": "^6.9.1"
  },
  "dependencies-comments": {
    "@babel/runtime": "used in combination with devDependency @babel/plugin-transform-runtime, polyfilling built-ins in source code, instead of using globals"
  },
  "dependencies": {
    "@babel/runtime": "^7.13.17",
    "@babel/runtime-corejs3": "^7.13.17",
    "@redux-saga/core": "^1.1.3",
    "axios": "^0.21.1",
    "classnames": "^2.3.1",
    "core-js": "^3.11.1",
    "dayjs": "^1.10.4",
    "immer": "^9.0.2",
    "immerable-record": "file:workspaces/immerable/",
    "prop-types": "^15.7.2",
    "react-redux": "^7.2.4",
    "redux": "^4.1.0",
    "redux-saga": "^1.1.3",
    "regenerator-runtime": "^0.13.7"
  },
  "devDependencies-comments": {
    "@babel/plugin-transform-runtime": "used in combination with dependency @babel/runtime, polyfilling built-ins in source code, instead of globals",
    "@hapi/hapi": "application container + services framework, dev server which supports simple, declaritive configuration",
    "@hapi/inert": "static file and directory handlers for hapi",
    "babel-watch": "wraps node calls and a babel master process, to prevent babel + deps reload on JS script re-run",
    "colors": "library for CLI output text color and style formatting",
    "cross-env": "cross-platform wrapper for environment variables (POSIX (OS X and Linux) and Windows)",
    "fibers": "required for SASS build operations",
    "ignore-styles": "ignore imported styles during test runs while using test frameworks, such as mocha",
    "minimist": "library to support parsing of CLI-style args in NodeJS javascript modules",
    "rimraf": "cross-platform wrapper for recursively removing files and directories (like rm -rf) (POSIX (OS X and Linux) and Windows)"
  },
  "devDependencies": {
    "@babel/cli": "^7.13.16",
    "@babel/core": "^7.14.0",
    "@babel/eslint-parser": "^7.14.3",
    "@babel/eslint-plugin": "^7.13.16",
    "@babel/plugin-proposal-decorators": "^7.13.15",
    "@babel/plugin-proposal-throw-expressions": "^7.12.13",
    "@babel/plugin-syntax-dynamic-import": "^7.8.3",
    "@babel/plugin-transform-react-jsx-source": "^7.12.13",
    "@babel/plugin-transform-runtime": "^7.13.15",
    "@babel/preset-env": "^7.14.1",
    "@babel/preset-react": "^7.13.13",
    "@babel/register": "^7.13.6",
    "@hapi/hapi": "^20.1.2",
    "@hapi/inert": "^6.0.3",
    "are-you-es5": "^2.1.1",
    "babel-loader": "^8.2.2",
    "babel-plugin-module-resolver": "^4.1.0",
    "babel-plugin-transform-imports": "^2.0.0",
    "babel-watch": "^7.4.1",
    "chai": "^4.3.4",
    "colors": "^1.4.0",
    "copy-webpack-plugin": "^9.0.0",
    "cross-env": "^7.0.2",
    "css-loader": "^5.2.4",
    "enzyme": "^3.11.0",
    "enzyme-to-json": "^3.6.2",
    "eslint": "^7.26.0",
    "eslint-config-airbnb": "^18.2.1",
    "eslint-config-airbnb-base": "^14.2.1",
    "eslint-plugin-import": "^2.23.3",
    "eslint-plugin-jsx-a11y": "^6.4.1",
    "eslint-plugin-react": "^7.23.2",
    "eslint-plugin-react-hooks": "^4.2.0",
    "fibers": "^5.0.0",
    "file-loader": "^6.2.0",
    "html-webpack-plugin": "^5.3.1",
    "html-webpack-tags-plugin": "^3.0.1",
    "ignore-styles": "^5.0.1",
    "jsdom": "^16.5.3",
    "karma": "^6.3.2",
    "karma-cli": "^2.0.0",
    "karma-coverage": "^2.0.3",
    "karma-chrome-launcher": "^3.1.0",
    "karma-detect-browsers": "^2.3.3",
    "karma-edge-launcher": "^0.4.2",
    "karma-firefox-launcher": "^2.1.0",
    "karma-htmlfile-reporter": "^0.3.8",
    "karma-ie-launcher": "^1.0.0",
    "karma-jsdom-launcher": "^9.0.0",
    "karma-mocha": "^2.0.1",
    "karma-phantomjs-launcher": "^1.0.4",
    "karma-sourcemap-loader": "^0.3.8",
    "karma-webpack": "^5.0.0",
    "mini-css-extract-plugin": "^1.6.0",
    "minimist": "^1.2.5",
    "mocha": "^9.0.1",
    "mochawesome": "^6.2.2",
    "mochawesome-merge": "^4.2.0",
    "mochawesome-report-generator": "^5.2.0",
    "nyc": "^15.1.0",
    "postcss-loader": "^6.1.0",
    "postcss-preset-env": "^6.7.0",
    "redux-devtools-extension": "^2.13.9",
    "resolve-url-loader": "^4.0.0",
    "rimraf": "^3.0.2",
    "sass": "^1.32.12",
    "sinon": "^11.1.1",
    "sinon-chai": "^3.6.0",
    "sass-loader": "^12.1.0",
    "webpack": "^5.36.2",
    "webpack-bundle-analyzer": "^4.4.1",
    "webpack-cli": "^4.6.0",
    "webpack-dashboard": "^3.3.1",
    "webpack-dev-middleware": "5.0.0",
    "webpack-hot-middleware": "^2.25.0"
  },
  "scripts": {
    "list:tasks": "node task/runTask.js list",
    "build:immerable": "node task/runTask.js build --WORKSPACE=immerable --ENVIRON=prod",
    "build:immerable:dev": "node task/runTask.js build --WORKSPACE=immerable --ENVIRON=dev",
    "build:immerable:prod": "node task/runTask.js build --WORKSPACE=immerable --ENVIRON=prod",
    "build:immerable:release": "node task/runTask.js build --WORKSPACE=immerable --ENVIRON=release",
    "clean:immerable": "node task/runTask.js clean --WORKSPACE=immerable --CLEAN_SCOPE=all",
    "clean:immerable:all": "node task/runTask.js clean --WORKSPACE=immerable --CLEAN_SCOPE=all",
    "clean:immerable:build": "node task/runTask.js clean --WORKSPACE=immerable --CLEAN_SCOPE=build",
    "clean:immerable:dependencies": "node task/runTask.js clean --WORKSPACE=immerable --CLEAN_SCOPE=dependencies",
    "clean:immerable:dependency-locks": "node task/runTask.js clean --WORKSPACE=immerable --CLEAN_SCOPE=dependency-locks",
    "test:immerable": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=immerable TEST_TYPE=unit SHOULD_CONFINE_TO_CURRENT_WORKSPACE=true nyc --nycrc-path config/test/nyc.config.js pnpx mocha --config config/test/mocha.config.js --require ignore-styles --require config/test/babel-register.config.js",
    "build": "node task/runTask.js build --WORKSPACE=react --ENVIRON=prod",
    "build:dev": "node task/runTask.js build --WORKSPACE=react --ENVIRON=dev",
    "build:prod": "node task/runTask.js build --WORKSPACE=react --ENVIRON=prod",
    "build:prod-dev": "node task/runTask.js build --WORKSPACE=react --ENVIRON=prod-dev",
    "build:preact": "node task/runTask.js build --WORKSPACE=preact --ENVIRON=prod",
    "build:preact:dev": "node task/runTask.js build --WORKSPACE=preact --ENVIRON=dev",
    "build:preact:prod": "node task/runTask.js build --WORKSPACE=preact --ENVIRON=prod",
    "build:preact:prod-dev": "node task/runTask.js build --WORKSPACE=preact --ENVIRON=prod-dev",
    "build:react": "node task/runTask.js build --WORKSPACE=react --ENVIRON=prod",
    "build:react:dev": "node task/runTask.js build --WORKSPACE=react --ENVIRON=dev",
    "build:react:prod": "node task/runTask.js build --WORKSPACE=react --ENVIRON=prod",
    "build:react:prod-dev": "node task/runTask.js build --WORKSPACE=react --ENVIRON=prod-dev",
    "clean": "node task/runTask.js clean --CLEAN_SCOPE=all",
    "clean:all": "node task/runTask.js clean --CLEAN_SCOPE=all",
    "clean:build": "node task/runTask.js clean --CLEAN_SCOPE=build",
    "clean:dependencies": "node task/runTask.js clean --CLEAN_SCOPE=dependencies",
    "clean:dependency-locks": "node task/runTask.js clean --CLEAN_SCOPE=dependency-locks",
    "clean:preact": "node task/runTask.js clean --WORKSPACE=preact --CLEAN_SCOPE=all",
    "clean:preact:all": "node task/runTask.js clean --WORKSPACE=preact --CLEAN_SCOPE=all",
    "clean:preact:build": "node task/runTask.js clean --WORKSPACE=preact --CLEAN_SCOPE=build",
    "clean:preact:dependencies": "node task/runTask.js clean --WORKSPACE=preact --CLEAN_SCOPE=dependencies",
    "clean:preact:dependency-locks": "node task/runTask.js clean --WORKSPACE=preact --CLEAN_SCOPE=dependency-locks",
    "clean:react": "node task/runTask.js clean --WORKSPACE=react --CLEAN_SCOPE=all",
    "clean:react:all": "node task/runTask.js clean --WORKSPACE=react --CLEAN_SCOPE=all",
    "clean:react:build": "node task/runTask.js clean --WORKSPACE=react --CLEAN_SCOPE=build",
    "clean:react:dependencies": "node task/runTask.js clean --WORKSPACE=react --CLEAN_SCOPE=dependencies",
    "clean:react:dependency-locks": "node task/runTask.js clean --WORKSPACE=react --CLEAN_SCOPE=dependency-locks",
    "clean:test": "node task/runTask.js clean --CLEAN_SCOPE=test",
    "start": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev --SERVER_SHOULD_HOT_RELOAD",
    "start:no-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev",
    "start:network": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev --SERVER_SHOULD_HOT_RELOAD --SERVER_SHOULD_NETWORK",
    "start:network:no-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev --SERVER_SHOULD_NETWORK",
    "start:dev": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev --SERVER_SHOULD_HOT_RELOAD",
    "start:dev:no-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev",
    "start:dev:network": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev --SERVER_SHOULD_HOT_RELOAD --SERVER_SHOULD_NETWORK",
    "start:dev:network:no-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev --SERVER_SHOULD_NETWORK",
    "start:prod": "node task/runTask.js start --WORKSPACE=react --ENVIRON=prod --SERVER_SHOULD_HOT_RELOAD",
    "start:prod-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=prod",
    "start:prod:network": "node task/runTask.js start --WORKSPACE=react --ENVIRON=prod --SERVER_SHOULD_HOT_RELOAD --SERVER_SHOULD_NETWORK",
    "start:prod:network:no-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=prod --SERVER_SHOULD_NETWORK",
    "start:prod-dev": "node task/runTask.js start --WORKSPACE=react --ENVIRON=prod-dev --SERVER_SHOULD_HOT_RELOAD",
    "start:prod-dev:no-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=prod-dev",
    "start:prod-dev:network": "node task/runTask.js start --WORKSPACE=react --ENVIRON=prod-dev --SERVER_SHOULD_HOT_RELOAD --SERVER_SHOULD_NETWORK",
    "start:prod-dev:network:no-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=prod-dev --SERVER_SHOULD_NETWORK",
    "start:preact": "node task/runTask.js start --WORKSPACE=preact --ENVIRON=dev --SERVER_SHOULD_HOT_RELOAD",
    "start:preact:no-reload": "node task/runTask.js start --WORKSPACE=preact --ENVIRON=dev",
    "start:preact:network": "node task/runTask.js start --WORKSPACE=preact --ENVIRON=dev --SERVER_SHOULD_HOT_RELOAD --SERVER_SHOULD_NETWORK",
    "start:preact:network:no-reload": "node task/runTask.js start --WORKSPACE=preact --ENVIRON=dev --SERVER_SHOULD_NETWORK",
    "start:preact:dev": "node task/runTask.js start --WORKSPACE=preact --ENVIRON=dev --SERVER_SHOULD_HOT_RELOAD",
    "start:preact:dev:no-reload": "node task/runTask.js start --WORKSPACE=preact --ENVIRON=dev",
    "start:preact:dev:network": "node task/runTask.js start --WORKSPACE=preact --ENVIRON=dev --SERVER_SHOULD_HOT_RELOAD --SERVER_SHOULD_NETWORK",
    "start:preact:dev:network:no-reload": "node task/runTask.js start --WORKSPACE=preact --ENVIRON=dev --SERVER_SHOULD_NETWORK",
    "start:preact:prod": "node task/runTask.js start --WORKSPACE=preact --ENVIRON=prod --SERVER_SHOULD_HOT_RELOAD",
    "start:preact:prod-dev": "node task/runTask.js start --WORKSPACE=preact --ENVIRON=prod-dev --SERVER_SHOULD_HOT_RELOAD",
    "start:preact:prod-dev:no-reload": "node task/runTask.js start --WORKSPACE=preact --ENVIRON=prod-dev",
    "start:preact:prod-dev:network": "node task/runTask.js start --WORKSPACE=preact --ENVIRON=prod-dev --SERVER_SHOULD_HOT_RELOAD --SERVER_SHOULD_NETWORK",
    "start:preact:prod-dev:network:no-reload": "node task/runTask.js start --WORKSPACE=preact --ENVIRON=prod-dev --SERVER_SHOULD_NETWORK",
    "start:react": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev --SERVER_SHOULD_HOT_RELOAD",
    "start:react:no-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev",
    "start:react:network": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev --SERVER_SHOULD_HOT_RELOAD --SERVER_SHOULD_NETWORK",
    "start:react:network:no-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev --SERVER_SHOULD_NETWORK",
    "start:react:dev": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev --SERVER_SHOULD_HOT_RELOAD",
    "start:react:dev:no-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev",
    "start:react:dev:network": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev --SERVER_SHOULD_HOT_RELOAD --SERVER_SHOULD_NETWORK",
    "start:react:dev:network:no-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=dev --SERVER_SHOULD_NETWORK",
    "start:react:prod": "node task/runTask.js start --WORKSPACE=react --ENVIRON=prod --SERVER_SHOULD_HOT_RELOAD",
    "start:react:prod-dev": "node task/runTask.js start --WORKSPACE=react --ENVIRON=prod-dev --SERVER_SHOULD_HOT_RELOAD",
    "start:react:prod-dev:no-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=prod-dev",
    "start:react:prod-dev:network": "node task/runTask.js start --WORKSPACE=react --ENVIRON=prod-dev --SERVER_SHOULD_HOT_RELOAD --SERVER_SHOULD_NETWORK",
    "start:react:prod-dev:network:no-reload": "node task/runTask.js start --WORKSPACE=react --ENVIRON=prod-dev --SERVER_SHOULD_NETWORK",
    "test": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react pnpx mocha --config config/test/mocha.config.js --require ignore-styles --require config/test/babel-register.config.js",
    "test:coverage": "node task/runTask.js update --IS_MEMBER_TASK && cross-env WORKSPACE=react nyc --nycrc-path config/test/nyc.config.js pnpm run test",
    "test:functional": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react TEST_TYPE=functional pnpx mocha --config config/test/mocha.config.js --require ignore-styles --require config/test/babel-register.config.js",
    "test:functional:coverage": "node task/runTask.js update --IS_MEMBER_TASK && cross-env TEST_TYPE=functional WORKSPACE=react nyc --nycrc-path config/test/nyc.config.js pnpm run test:functional",
    "test:integration": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react TEST_TYPE=integration pnpx mocha --config config/test/mocha.config.js --require ignore-styles --require config/test/babel-register.config.js",
    "test:integration:coverage": "node task/runTask.js update --IS_MEMBER_TASK && cross-env TEST_TYPE=integration WORKSPACE=react nyc --nycrc-path config/test/nyc.config.js pnpm run test:integration",
    "test:unit": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react TEST_TYPE=unit pnpx mocha --config config/test/mocha.config.js --require ignore-styles --require config/test/babel-register.config.js",
    "test:unit:coverage": "node task/runTask.js update --IS_MEMBER_TASK && cross-env TEST_TYPE=unit WORKSPACE=react nyc --nycrc-path config/test/nyc.config.js pnpm run test:unit",
    "test:browser": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev pnpx karma start config/test/karma.config.js --single-run",
    "test:browser:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev pnpx karma start config/test/karma.config.js",
    "test:browser:dev": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev pnpx karma start config/test/karma.config.js --single-run",
    "test:browser:dev:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev pnpx karma start config/test/karma.config.js",
    "test:browser:prod": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod pnpx karma start config/test/karma.config.js --single-run",
    "test:browser:prod:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod pnpx karma start config/test/karma.config.js",
    "test:browser:functional": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=functional pnpx karma start config/test/karma.config.js --single-run",
    "test:browser:functional:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=functional pnpx karma start config/test/karma.config.js",
    "test:browser:functional:dev": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=functional pnpx karma start config/test/karma.config.js --single-run",
    "test:browser:functional:dev:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=functional pnpx karma start config/test/karma.config.js",
    "test:browser:functional:prod": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod TEST_TYPE=functional pnpx karma start config/test/karma.config.js --single-run",
    "test:browser:functional:prod:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod TEST_TYPE=functional pnpx karma start config/test/karma.config.js",
    "test:browser:integration": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=integration pnpx karma start config/test/karma.config.js --single-run",
    "test:browser:integration:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=integration pnpx karma start config/test/karma.config.js",
    "test:browser:integration:dev": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=integration pnpx karma start config/test/karma.config.js --single-run",
    "test:browser:integration:dev:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=integration pnpx karma start config/test/karma.config.js",
    "test:browser:integration:prod": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod TEST_TYPE=integration pnpx karma start config/test/karma.config.js --single-run",
    "test:browser:integration:prod:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod TEST_TYPE=integration pnpx karma start config/test/karma.config.js",
    "test:browser:unit": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=unit pnpx karma start config/test/karma.config.js --single-run",
    "test:browser:unit:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=unit pnpx karma start config/test/karma.config.js",
    "test:browser:unit:dev": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=unit pnpx karma start config/test/karma.config.js --single-run",
    "test:browser:unit:dev:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=unit pnpx karma start config/test/karma.config.js",
    "test:browser:unit:prod": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod TEST_TYPE=unit pnpx karma start config/test/karma.config.js --single-run",
    "test:browser:unit:prod:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod TEST_TYPE=unit pnpx karma start config/test/karma.config.js",
    "test:preact": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact pnpx mocha --config config/test/mocha.config.js --require ignore-styles --require config/test/babel-register.config.js",
    "test:preact:coverage": "node task/runTask.js update --IS_MEMBER_TASK && cross-env WORKSPACE=preact nyc --nycrc-path config/test/nyc.config.js pnpm run test:preact",
    "test:preact:browser": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev pnpx karma start config/test/karma.config.js --single-run",
    "test:preact:browser:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev pnpx karma start config/test/karma.config.js",
    "test:preact:browser:dev": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev pnpx karma start config/test/karma.config.js --single-run",
    "test:preact:browser:dev:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev pnpx karma start config/test/karma.config.js",
    "test:preact:browser:prod": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=prod pnpx karma start config/test/karma.config.js --single-run",
    "test:preact:browser:prod:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=prod pnpx karma start config/test/karma.config.js",
    "test:preact:browser:functional": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev TEST_TYPE=functional pnpx karma start config/test/karma.config.js --single-run",
    "test:preact:browser:functional:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev TEST_TYPE=functional pnpx karma start config/test/karma.config.js",
    "test:preact:browser:functional:dev": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev TEST_TYPE=functional pnpx karma start config/test/karma.config.js --single-run",
    "test:preact:browser:functional:dev:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev TEST_TYPE=functional pnpx karma start config/test/karma.config.js",
    "test:preact:browser:functional:prod": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=prod TEST_TYPE=functional pnpx karma start config/test/karma.config.js --single-run",
    "test:preact:browser:functional:prod:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=prod TEST_TYPE=functional pnpx karma start config/test/karma.config.js",
    "test:preact:browser:integration": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev TEST_TYPE=integration pnpx karma start config/test/karma.config.js --single-run",
    "test:preact:browser:integration:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev TEST_TYPE=integration pnpx karma start config/test/karma.config.js",
    "test:preact:browser:integration:dev": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev TEST_TYPE=integration pnpx karma start config/test/karma.config.js --single-run",
    "test:preact:browser:integration:dev:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev TEST_TYPE=integration pnpx karma start config/test/karma.config.js",
    "test:preact:browser:integration:prod": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=prod TEST_TYPE=integration pnpx karma start config/test/karma.config.js --single-run",
    "test:preact:browser:integration:prod:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=prod TEST_TYPE=integration pnpx karma start config/test/karma.config.js",
    "test:preact:browser:unit": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev TEST_TYPE=unit pnpx karma start config/test/karma.config.js --single-run",
    "test:preact:browser:unit:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev TEST_TYPE=unit pnpx karma start config/test/karma.config.js",
    "test:preact:browser:unit:dev": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev TEST_TYPE=unit pnpx karma start config/test/karma.config.js --single-run",
    "test:preact:browser:unit:dev:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=dev TEST_TYPE=unit pnpx karma start config/test/karma.config.js",
    "test:preact:browser:unit:prod": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=prod TEST_TYPE=unit pnpx karma start config/test/karma.config.js --single-run",
    "test:preact:browser:unit:prod:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact ENVIRON=prod TEST_TYPE=unit pnpx karma start config/test/karma.config.js",
    "test:preact:functional": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact TEST_TYPE=functional pnpx mocha --config config/test/mocha.config.js --require ignore-styles --require config/test/babel-register.config.js",
    "test:preact:functional:coverage": "node task/runTask.js update --IS_MEMBER_TASK && cross-env TEST_TYPE=functional WORKSPACE=preact nyc --nycrc-path config/test/nyc.config.js pnpm run test:preact:functional",
    "test:preact:integration": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact TEST_TYPE=integration pnpx mocha --config config/test/mocha.config.js --require ignore-styles --require config/test/babel-register.config.js",
    "test:preact:integration:coverage": "node task/runTask.js update --IS_MEMBER_TASK && cross-env TEST_TYPE=integration WORKSPACE=preact nyc --nycrc-path config/test/nyc.config.js pnpm run test:preact:integration",
    "test:preact:unit": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=preact TEST_TYPE=unit pnpx mocha --config config/test/mocha.config.js --require ignore-styles --require config/test/babel-register.config.js",
    "test:preact:unit:coverage": "node task/runTask.js update --IS_MEMBER_TASK && cross-env TEST_TYPE=unit WORKSPACE=preact nyc --nycrc-path config/test/nyc.config.js pnpm run test:preact:unit",
    "test:react": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react pnpx mocha --config config/test/mocha.config.js --require ignore-styles --require config/test/babel-register.config.js",
    "test:react:coverage": "node task/runTask.js update --IS_MEMBER_TASK && cross-env WORKSPACE=react nyc --nycrc-path config/test/nyc.config.js pnpm run test:react",
    "test:react:browser": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev pnpx karma start config/test/karma.config.js --single-run",
    "test:react:browser:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev pnpx karma start config/test/karma.config.js",
    "test:react:browser:dev": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev pnpx karma start config/test/karma.config.js --single-run",
    "test:react:browser:dev:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev pnpx karma start config/test/karma.config.js",
    "test:react:browser:prod": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod pnpx karma start config/test/karma.config.js --single-run",
    "test:react:browser:prod:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod pnpx karma start config/test/karma.config.js",
    "test:react:browser:functional": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=functional pnpx karma start config/test/karma.config.js --single-run",
    "test:react:browser:functional:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=functional pnpx karma start config/test/karma.config.js",
    "test:react:browser:functional:dev": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=functional pnpx karma start config/test/karma.config.js --single-run",
    "test:react:browser:functional:dev:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=functional pnpx karma start config/test/karma.config.js",
    "test:react:browser:functional:prod": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod TEST_TYPE=functional pnpx karma start config/test/karma.config.js --single-run",
    "test:react:browser:functional:prod:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod TEST_TYPE=functional pnpx karma start config/test/karma.config.js",
    "test:react:browser:integration": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=integration pnpx karma start config/test/karma.config.js --single-run",
    "test:react:browser:integration:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=integration pnpx karma start config/test/karma.config.js",
    "test:react:browser:integration:dev": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=integration pnpx karma start config/test/karma.config.js --single-run",
    "test:react:browser:integration:dev:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=integration pnpx karma start config/test/karma.config.js",
    "test:react:browser:integration:prod": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod TEST_TYPE=integration pnpx karma start config/test/karma.config.js --single-run",
    "test:react:browser:integration:prod:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod TEST_TYPE=integration pnpx karma start config/test/karma.config.js",
    "test:react:browser:unit": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=unit pnpx karma start config/test/karma.config.js --single-run",
    "test:react:browser:unit:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=unit pnpx karma start config/test/karma.config.js",
    "test:react:browser:unit:dev": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=unit pnpx karma start config/test/karma.config.js --single-run",
    "test:react:browser:unit:dev:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=dev TEST_TYPE=unit pnpx karma start config/test/karma.config.js",
    "test:react:browser:unit:prod": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod TEST_TYPE=unit pnpx karma start config/test/karma.config.js --single-run",
    "test:react:browser:unit:prod:watch": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react ENVIRON=prod TEST_TYPE=unit pnpx karma start config/test/karma.config.js",
    "test:react:functional": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react TEST_TYPE=functional pnpx mocha --config config/test/mocha.config.js --require ignore-styles --require config/test/babel-register.config.js",
    "test:react:functional:coverage": "node task/runTask.js update --IS_MEMBER_TASK && cross-env TEST_TYPE=functional WORKSPACE=react nyc --nycrc-path config/test/nyc.config.js pnpm run test:react:functional",
    "test:react:integration": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react TEST_TYPE=integration pnpx mocha --config config/test/mocha.config.js --require ignore-styles --require config/test/babel-register.config.js",
    "test:react:integration:coverage": "node task/runTask.js update --IS_MEMBER_TASK && cross-env WORKSPACE=react nyc --no-clean --nycrc-path config/test/nyc.config.js pnpm run test:react:integration",
    "test:react:unit": "node task/runTask.js update --IS_MEMBER_TASK && cross-env NODE_ENV=test WORKSPACE=react TEST_TYPE=unit pnpx mocha --config config/test/mocha.config.js --require ignore-styles --require config/test/babel-register.config.js",
    "test:react:unit:coverage": "node task/runTask.js update --IS_MEMBER_TASK && cross-env TEST_TYPE=unit WORKSPACE=react nyc --nycrc-path config/test/nyc.config.js pnpm run test:react:unit",
    "checkForNonEs5Dependencies": "node task/runTask.js update --IS_MEMBER_TASK && cross-env printf \"Checking project root dependencies...\\n\\n\" && pnpx are-you-es5 check -r . ; cross-env printf \"\\nChecking preact workspace dependencies...\\n\" && pnpx are-you-es5 check -r workspaces/preact ; printf \"\\nChecking react workspace dependencies...\\n\" && pnpx are-you-es5 check -r workspaces/react",
    "lint": "node task/runTask.js lint --WORKSPACE=react",
    "lint:debug": "node task/runTask.js lint --WORKSPACE=react --SHOULD_DEBUG",
    "lint:preact": "node task/runTask.js lint --WORKSPACE=preact",
    "lint:preact:debug": "node task/runTask.js lint --WORKSPACE=preact --SHOULD_DEBUG",
    "lint:react": "node task/runTask.js lint --WORKSPACE=react",
    "lint:react:debug": "node task/runTask.js lint --WORKSPACE=react --SHOULD_DEBUG"
  },
  "author": {
    "name": "Antonio Malcolm",
    "email": "antonio@antoniomalcolm.com",
    "url": "https://antoniomalcolm.com"
  },
  "homepage": "https://github.com/antonio-malcolm/immerable-record",
  "license": "BSD-3-Clause",
  "repository": {
    "url": "git+https://github.com/antonio-malcolm/immerable-record.git",
    "type": "git"
  }
}
